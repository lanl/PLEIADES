"""Test the special_analysis module for SAMMY alphanumeric options."""

import pytest
from pydantic import ValidationError

from pleiades.sammy.alphanumerics.special_analysis import SpecialAnalysisOptions


def test_default_values():
    """Test default values of special analysis options."""
    options = SpecialAnalysisOptions()

    # Check default values
    assert options.reconstruct_cross_section is False
    assert options.artificial_energy_grid is False
    assert options.relevant_parameters_via_uncertainty is False
    assert options.cross_section_covariance_matrix is False
    assert options.initial_uncertainty_multiplier is None
    assert options.final_uncertainty_multiplier is None
    assert options.e_dependent_initial_uncertainty is False
    assert options.summed_strength_function is False
    assert options.generate_partial_derivatives_only is False
    assert options.generate_spin_group_cross_sections is False
    assert options.reformulate_data_for_idc is False
    assert options.compare_experiment_to_theory is False
    assert options.generate_y_and_w_matrices is False
    assert options.read_y_and_w_matrices is False
    assert options.stop_command is None
    assert options.write_calculated_cross_sections is False
    assert options.uniform_energy_grid is False
    assert options.uniform_velocity_grid is False
    assert options.uniform_time_grid is False
    assert options.create_publishable_list is False
    assert options.do_not_test_for_eigenvalues is False

    # Verify no commands are generated by default
    assert options.get_alphanumeric_commands() == []


def test_reconstruct_cross_section():
    """Test the RECONSTRUCT CROSS SECTION command."""
    options = SpecialAnalysisOptions(reconstruct_cross_section=True)
    assert "RECONSTRUCT CROSS SECTION FROM RESONANCE PARAMETERS" in options.get_alphanumeric_commands()


def test_artificial_energy_grid():
    """Test the ARTIFICIAL ENERGY GRID command."""
    options = SpecialAnalysisOptions(artificial_energy_grid=True)
    assert "ARTIFICIAL ENERGY GRID IS NEEDED" in options.get_alphanumeric_commands()


def test_relevant_parameters_via_uncertainty():
    """Test the RELEVANT PARAMETERS command."""
    options = SpecialAnalysisOptions(relevant_parameters_via_uncertainty=True)
    assert "RELEVANT PARAMETERS ARE CHOSEN VIA UNCERTAINTIES" in options.get_alphanumeric_commands()


def test_cross_section_covariance_matrix():
    """Test the CROSS SECTION COVARIANCE command."""
    options = SpecialAnalysisOptions(cross_section_covariance_matrix=True)
    assert "CROSS SECTION COVARIANCE MATRIX IS WANTED" in options.get_alphanumeric_commands()


def test_uncertainty_multipliers():
    """Test the uncertainty multiplier commands."""
    options = SpecialAnalysisOptions(initial_uncertainty_multiplier=2.5, final_uncertainty_multiplier=0.8)
    commands = options.get_alphanumeric_commands()
    assert "INITIAL UNCERTAINTY MULTIPLIER = 2.5" in commands
    assert "FINAL UNCERTAINTY MULTIPLIER = 0.8" in commands


def test_e_dependent_initial_uncertainty():
    """Test the E-DEPENDENT INITIAL UNCERTAINTY command."""
    options = SpecialAnalysisOptions(e_dependent_initial_uncertainty=True)
    assert "E-DEPENDENT INITIAL UNCERTAINTY MULTIPLIER" in options.get_alphanumeric_commands()


def test_summed_strength_function():
    """Test the SUMMED STRENGTH FUNCTION command."""
    options = SpecialAnalysisOptions(summed_strength_function=True)
    assert "SUMMED STRENGTH FUNCTION IS WANTED" in options.get_alphanumeric_commands()


def test_generate_partial_derivatives_only():
    """Test the GENERATE PARTIAL DERIVATIVES command."""
    options = SpecialAnalysisOptions(generate_partial_derivatives_only=True)
    assert "GENERATE PARTIAL DERIVATIVES ONLY" in options.get_alphanumeric_commands()


def test_generate_spin_group_cross_sections():
    """Test the GENERATE SPIN GROUP command."""
    options = SpecialAnalysisOptions(generate_spin_group_cross_sections=True)
    assert "GENERATE SPIN GROUP CROSS SECTIONS" in options.get_alphanumeric_commands()


def test_reformulate_data_for_idc():
    """Test the REFORMULATE DATA command."""
    options = SpecialAnalysisOptions(reformulate_data_for_idc=True)
    assert "REFORMULATE DATA FOR IMPLICIT DATA COVARIANCE" in options.get_alphanumeric_commands()


def test_compare_experiment_to_theory():
    """Test the COMPARE EXPERIMENT command."""
    options = SpecialAnalysisOptions(compare_experiment_to_theory=True)
    assert "COMPARE EXPERIMENT TO THEORY" in options.get_alphanumeric_commands()


def test_yw_matrices_mutual_exclusivity():
    """Test mutual exclusivity of Y and W matrices options."""
    # Both options enabled should raise ValidationError
    with pytest.raises(ValidationError):
        SpecialAnalysisOptions(generate_y_and_w_matrices=True, read_y_and_w_matrices=True)

    # Each option individually should work
    options1 = SpecialAnalysisOptions(generate_y_and_w_matrices=True)
    assert "GENERATE Y AND W MATRICES" in options1.get_alphanumeric_commands()

    options2 = SpecialAnalysisOptions(read_y_and_w_matrices=True)
    assert "READ Y AND W MATRICES" in options2.get_alphanumeric_commands()


def test_stop_command():
    """Test the STOP command."""
    options = SpecialAnalysisOptions(stop_command="abc 5")
    assert "STOP abc 5" in options.get_alphanumeric_commands()


def test_write_calculated_cross_sections():
    """Test the WRITE CALCULATED CROSS SECTIONS command."""
    options = SpecialAnalysisOptions(write_calculated_cross_sections=True)
    assert "WRITE CALCULATED CROSS SECTIONS INTO ASCII" in options.get_alphanumeric_commands()


def test_uniform_grid_mutual_exclusivity():
    """Test mutual exclusivity of uniform grid options."""
    # Multiple options enabled should raise ValidationError
    with pytest.raises(ValidationError):
        SpecialAnalysisOptions(uniform_energy_grid=True, uniform_velocity_grid=True)

    with pytest.raises(ValidationError):
        SpecialAnalysisOptions(uniform_velocity_grid=True, uniform_time_grid=True)

    with pytest.raises(ValidationError):
        SpecialAnalysisOptions(uniform_energy_grid=True, uniform_time_grid=True)

    with pytest.raises(ValidationError):
        SpecialAnalysisOptions(uniform_energy_grid=True, uniform_velocity_grid=True, uniform_time_grid=True)

    # Each option individually should work
    options1 = SpecialAnalysisOptions(uniform_energy_grid=True)
    assert "UNIFORM ENERGY GRID" in options1.get_alphanumeric_commands()

    options2 = SpecialAnalysisOptions(uniform_velocity_grid=True)
    assert "UNIFORM VELOCITY GRID" in options2.get_alphanumeric_commands()

    options3 = SpecialAnalysisOptions(uniform_time_grid=True)
    assert "UNIFORM TIME GRID" in options3.get_alphanumeric_commands()


def test_create_publishable_list():
    """Test the CREATE PUBLISHABLE LIST command."""
    options = SpecialAnalysisOptions(create_publishable_list=True)
    assert "CREATE PUBLISHABLE LIST OF PARAMETERS" in options.get_alphanumeric_commands()


def test_do_not_test_for_eigenvalues():
    """Test the DO NOT TEST FOR EIGENVALUES command."""
    options = SpecialAnalysisOptions(do_not_test_for_eigenvalues=True)
    assert "DO NOT TEST FOR EIGENVALUES" in options.get_alphanumeric_commands()


def test_multiple_options():
    """Test multiple options enabled together."""
    options = SpecialAnalysisOptions(
        reconstruct_cross_section=True,
        cross_section_covariance_matrix=True,
        initial_uncertainty_multiplier=1.5,
        summed_strength_function=True,
        create_publishable_list=True,
    )

    commands = options.get_alphanumeric_commands()

    assert "RECONSTRUCT CROSS SECTION FROM RESONANCE PARAMETERS" in commands
    assert "CROSS SECTION COVARIANCE MATRIX IS WANTED" in commands
    assert "INITIAL UNCERTAINTY MULTIPLIER = 1.5" in commands
    assert "SUMMED STRENGTH FUNCTION IS WANTED" in commands
    assert "CREATE PUBLISHABLE LIST OF PARAMETERS" in commands
    assert len(commands) == 5  # Verify no additional/unexpected commands
